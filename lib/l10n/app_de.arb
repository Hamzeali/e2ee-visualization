{
    "language": "Deutsch",
    "skip": "Einführung überspringen",
    "reset": "Einführing neu starten",
    "errorTitel": "Fehler",
    "primeNumberErrorMessage": "(p) muss eine Primzahl sein!",
    "primitiveRootErrorMessage": "(g) muss primitve Wurzel von (p) sein!",
    "emptyErrorMessage": "Leere Werte sind nicht erlaubt.",
    "doneTitel": "Erledigt",
    "correctMessage": "Die Werte sind gesetzt.",
    "settings": "Einstellungen",
    "animationSpeed": "Animation-Geschwindigkeit",
    "appLanguage": "Sprache ",
    "zoomEnable": "Zoom Aktivieren",
    "secretBob": "Geheim (Bob)",
    "secretAlice": "Geheim (Alice)",
    "cancel": "Abbrechen",
    "introStart": "Starten Sie die Einführung",
    "aliceIntro": "Hi! Ich bin Alice.",
    "bobIntro": "Und ich bin Bob.",
    "eveIntro": "Und hier ist Eve.",
    "appDesc0": "Wir möchten sicher miteinander kommunizieren und wir wollen dazu symmetrische Verschlüsselung benutzen.",
    "appDesc1": "In dieser App erklären wir Ihnen, wie DHKE funktioniert.",
    "appDesc2": "Die Anwendung besteht aus 4 Szenen.",
    "firstScene": "Die erste Szene erklärt Ihnen die Grundidee von DHKE unter Verwendung von Farben.",
    "secondScene": "Die zweite gibt Ihnen einige mathematische Grundlagen über die Wurzel der Primzahl und das Problem des diskreten Logarithmus.",
    "thirdScene": "Die dritte erklärt DHKE mit Zahlen, wobei Sie auch Ihre eigenen Werte verwenden können :)",
    "fourthScene": "Die vierte zeigt Ihnen, wie ein MitM-Angriff auf DHKE passieren kann.",
    "sceneStart1": "Beginnen wir also mit den Szenen...",
    "sceneStart2": "Szenen starten",

    "about0": "Was ist DHKE?",
    "about1": "- Zweck des Diffie-Hellman Key-Exchange-Protokolls:",
    "about2": "Diffie-Hellman (kurz DH) ist ein Protokoll, das es zwei Parteien ermöglicht, über einen unsicheren Kanal (wie das Internet) sicher miteinander zu kommunizieren. Die Hauptidee von DH besteht darin, (asymmetrische) Schlüssel zwischen zwei Parteien zu generieren und auszutauschen. Der mathematische Algorithmus kann einen gemeinsamen geheimen Schlüssel erstellen, der zur symmetrischen Verschlüsselung verwendet werden kann. DH ist kein neues Protokoll, da es 1976 von Whitfield Diffie und Martin Hellman in Stanford erfunden wurde. DH kann den geheimen Schlüssel generieren, aber keine Nachrichten verschlüsseln oder entschlüsseln. Im nächsten Abschnitt werden wir im Detail sehen, wie dieses Protokoll funktioniert.",
    "about3": "- Das Diffie-Hellman-Protokoll:",
    "about4": "Szenario: Alice und Bob wollen sicher mit einem symmetrischen Verschlüsselungsverfahren kommunizieren (und haben keine PKI zur Verfügung). Sie sind über eine ungesicherte Leitung verbunden und haben noch keinen Schlüssel ausgetauscht (es gibt also keine Informationen, die sie im Voraus teilen).",
    "about5": "Das DH-Protokoll ermöglicht es, einen geheimen gemeinsamen Schlüssel zwischen zwei Parteien zu erstellen - über die ungesicherte Leitung. Die Sicherheit beruht auf der Schwierigkeit des Problems des diskreten Logarithmus.",
    "about6": "Alice und Bob verwenden eine Einwegfunktion, um einen geheimen Schlüssel S, den Sitzungsschlüssel, für die spätere Korrespondenz zu erhalten. Der Sitzungsschlüssel kann z. B. als Schlüssel in einem symmetrischen Verfahren wie AES verwendet werden. Dieser Sitzungsschlüssel ist nur den beiden Parteien bekannt. Wie funktioniert das Protokoll: Alice wählt eine Zufallszahl (a) und hält sie geheim. Sie wendet eine Einwegfunktion auf a an, um die Zahl A = g^a zu berechnen und sendet sie an Bob. Er tut dasselbe, indem er eine geheime Zufallszahl (b) auswählt, B = g^b berechnet und sie an Alice sendet. Die Zahl g ist zufällig und kann öffentlich bekannt sein. Alice wendet die Einwegfunktion zusammen mit ihrer Geheimzahl (a) auf B an, während Bob dasselbe mit seiner Geheimzahl b und der empfangenen Zahl A tut.",
    "about7": "Das Ergebnis S ist in jedem Fall dasselbe, da die Einwegfunktion kommutativ ist: (g^a)^b = (g^b)^a. Aber auch Bob kann Alices Geheimzahl (a) nicht aus den ihm zur Verfügung stehenden Daten rekonstruieren. Alice hingegen kann Bobs Geheimzahl (b) nicht ermitteln. Und ein Lauscher (Eve), der (g) kennt und sowohl A als auch B abgehört hat, kann dieses Wissen nicht nutzen, um a, b oder S zu ermitteln.",
    "about8": "Verfahren:",
    "about9": "Alice und Bob wollen einen geheimen Sitzungsschlüssel S über einen Kanal aushandeln, der abgehört werden kann.",
    "about10": "1. Sie wählen eine Primzahl p und eine Zufallszahl g (mit 2 ≤ g ≤ p-2) und tauschen diese Informationen offen aus.",
    "about11": "2. Alice wählt nun eine Zufallszahl a von {1,---,p-2}, und hält sie geheim. Analog dazu wählt Bob eine Zufallszahl b und hält sie geheim.",
    "about12": "3. Alice berechnet nun A = g^a (mod p).",
    "about13": "Bob berechnet B = g^b (mod p).",
    "about14": "4. Alice sendet das Ergebnis A an Bob. Bob sendet das Ergebnis B an Alice.",
    "about15": "A und B können also als öffentlich angesehen werden.",
    "about16": "Um den von beiden Parteien zu verwendenden Sitzungsschlüssel zu ermitteln, erhöhen beide Parteien getrennt voneinander die jeweils erhaltenen Ergebnisse in die Potenz ihrer geheimen Zufallszahl modulo p. Das bedeutet:",
    "about17": "- Alice berechnet S = B^a (mod p) und",
    "about18": "- Bob berechnet S = A^b (mod p).",
    "about19": "Selbst wenn ein Spion (Eve) g, p und die Zwischenergebnisse A und B abfängt, kann er diese nicht verwenden, um den verwendeten Sitzungsschlüssel zu ermitteln - aufgrund der Schwierigkeit, den diskreten Logarithmus a = logg(A) zu berechnen.",
    "about20": "Das DH-Problem und der Man-in-the-Middle:",
    "about21": "Obwohl das DHKE-Protokoll als eine der praktischsten Methoden zur Erzeugung eines gemeinsamen geheimen Schlüssels zwischen zwei kommunizierenden Parteien gilt, ist das grundlegende Diffie-Hellman-Protokoll anfällig für einen Man-in-the-Middle-Angriff, da es die kommunizierenden Parteien nicht authentifiziert. Der Angreifer kann die Kommunikation zwischen dem Sender und dem Empfänger blockieren und dann die Rolle einer bestimmten zweiten Partei übernehmen. In diesem Szenario kann der Angreifer die öffentlichen Schlüssel der beiden Parteien erhalten und seine eigenen generieren. Dann wird eine Kommunikation zwischen dem Angreifer und dem Absender und eine weitere Kommunikation zwischen dem Angreifer und dem Empfänger aufgebaut, wobei jede der kommunizierenden Parteien denkt, dass sie mit dem echten Partner kommuniziert. Auf diese Weise kann der Angreifer die geheime Nachricht, die mit diesen generierten Schlüsseln verschlüsselt wurde, leicht entschlüsseln.",

    "introduction": "Einführung",
    "intro0": "- Was ist die Primitivwurzel modulo einer Primzahl?",
    "intro1": "• Eine Primitivwurzel ",
    "intro2": " ist eine bestimmte Element einer primen Restklassengruppe mit Modulo ",
    "intro3": ". Mittels potenzieren einer Primitivwurzel ",
    "intro4": " jedes Element erzeugt werden kann.",
    "intro5": " modulo ",
    "intro6": "• Mit anderen Worten können wir ",
    "intro7": " Primitivwurzel der Primzahl ",
    "intro8": " nennen, wenn ",
    "intro9": " verschieden sind.",
    "intro10": "-> Beispiel: ",
    "intro11": "Nehmen wir an, ",
    "intro12": " und ",
    "intro13": "   Nach Berechnung des Moduls erhalten wir:",
    "intro14": "    Wie wir sehen, sind alle Ergebnisse ",
    "intro15": "verschieden",
    "intro16": ", also können wir sagen, dass ",
    "intro17": " eine primitive Wurzel der Primzahl ",
    "intro18": " ist",
    "intro19": "- Problem des diskreten Logarithmus:",
    "intro20": " • In einer endlichen Gruppe ist der diskrete Logarithmus schwer zu berechnen. Die ",
    "intro21": "Exponentialfunktion",
    "intro22": " ist also eine ",
    "intro23": "Einwegfunktion.",
    "intro24": " • Aber was ist eine Einwegfunktion?",
    "intro25": "   -> Angenommen, wir haben Daten",
    "intro26": ". es ist einfach ",
    "intro27": " zu berechnen. Aber es ist sehr schwierig, ihre Umkehrfunktion zu berechnen.",
    "intro28": "Nehmen wir an: ",
    "intro29": "   ",
    "intro30": " zu berechnen ist einfach, aber wenn wir die Umkehrfunktion berechnen wollen, wird es wirklich schwierig.",
    "intro31": " Mit anderen Worten, wenn wir ",
    "intro32": " haben, wird es sehr schwierig sein, den Wert von ",
    "intro33": " zu bestimmen. Where ",
    "intro34": " can be ",
    "intro35": "usw",

    "intro36": "- Was ist ein Generator?",
    "intro37": "Ein Generator (g) einer Gruppe ist ein Element, aus dem durch wiederholte Anwendung der Gruppenoperation jedes andere Element der Gruppe erzeugt werden kann. Im Fall einer Gruppe ganzer Zahlen modulo einer Primzahl (p) ist ein Generator ein Element, das, wenn es auf alle möglichen Potenzen von 1 bis p-1 erhöht wird (wobei p die Primzahl ist), alle anderen Elemente der Gruppe, die nicht Null sind, erzeugt.",
    "intro38": "- Szenario der Szene:",
    "intro39": "In dieser Szene gibt es ein Beispiel für einen Generator für die multiplikative Gruppe der ganzen Zahlen modulo einer Primzahl p = 17 ist g = 3. Die Gruppe ist {1, 2, 4, 8, 9, 13, 16}. Das ist die Menge der ganzen Zahlen von 1 bis 16 (p-1), die relativ prim zu 17 sind.",

    "dhke": "Was ist DHKE?",
    "readDHKE": "Lesen Sie mehr über DHKE?",
    "yes": "Ja",
    "no": "Nein",

    "showCase0": "Gehen Sie einen Schritt nach vorne.",
    "showCase1": "Gehen Sie einen Schritt zurück.",
    "showCase2": "Blenden Sie das Beschreibungsfeld ein oder aus.",
    "showCase3": "Ändern Sie die Einstellungen der Anwendung.",
    "showCase4": "Setzen Sie die Szene zurück und beginnen Sie von vorne.",
    "showCase5": "Lassen Sie die App im automatischen Modus laufen.",
    "showCase6": "Darin befinden sich drei Knöpfe.",
    "showCase7": "Schrittnummer. Sie können diese Zahl drücken und den Schritt eingeben, zu dem Sie gehen möchten.",
    "showCase8": "In diesem Feld sehen Sie einige Erklärungen dazu, was auf dem Bildschirm passiert. (Sie können das Feld durch langes Drücken maximieren oder minimieren)",

    "outOfRangeError": "Bitte geben Sie eine gültige Nummer ein.",
    "goToStep": "Gehen Sie zu Schrittnummer:",

    "lastLeft": "Anfang der Szene!",
    "lastLeft2": "Anfang der Szene! Möchten Sie zur vorherigen Szene wechseln?",
    "lastRight": "Ende der Szene! Möchten Sie zur nächsten Szene wechseln?",
    "lastRight2": "Ende der Szene! Möchten Sie zur ersten Szene zurückkehren?",

    "slide1": "Grundlegende Idee des DHKE",
    "slide2": "Mathematische Grundlagen",
    "slide3": "Wie funktioniert das DHKE?",
    "slide4": "MitM-Angriff auf DHKE",
    "text1": "Das Diffie-Hellman-Schlüsselaustausch- Protokoll kann mittels einer Analogie, die mit Farbmischungen funktioniert, gezeigt werden\n(später werden wir sehen, wie es mit Zahlen funktioniert).",
    "text2": "Auswahl einer Primzahl (p) und eines Generators (g).\n",
    "text31": "Diesmal mit Zahlen – mit kleinen Zahlen. DHKE verwendet in der Praxis große Zahlen (p > 3000 bit laut BSI-Empfehlung).",
    "text321": "Alice wählt eine große Primzahl. Nehmen wir an, sie wählt p = ",
    "text322": "und ein Generator g = ",
    "text4": "Man-in-the-Middle-Angriff auf DHKE: Eve blockiert den Schlüsselaustausch zwischen Alice und Bob.",
    "slide1Item0": "Alice denkt an ihre erste Farbe, die gelb ist.",
    "slide1Item1": "Als Alice Bob zunächst die grundlegende Farbe schickt, welche im echten Protokoll später der 'Generator' ist, kann Eve ihr zuhören und kennt so auch die Farbe.",
    "slide1Item2": "Um zu verhindern, dass Eve in Besitz der geheimen Farben kommt, denkt Alice an eine andere Farbe (rot) und Bob denkt auch an eine andere Farbe (türkis).",
    "slide1Item3": "Alice und Bob mischen die erste Farbe von Alice (gelb) mit den Farben, die sie sich jeweils als Zweites ausgedacht haben. Jetzt haben Alice und Bob eine neue Mischfarbe (Alice hat orange, Bob hat blau).",
    "slide1Item4": "Alice sendet ihre gemischte Farbe (orange) an Bob, und Bob sendet seine gemischte Farbe (blau) an Alice. Eve kann die Mischfarbe von beiden kennen, aber nicht die tatsächliche Farbe.",
    "slide1Item5": "Alice mischt Bobs gemischte Farbe (blau) mit ihrer zweiten Farbe (rot). Bob macht dasselbe, er mischt Alices Mischfarbe (orange) mit seiner zweiten Farbe (blau).",
    "slide1Item6": "Jetzt haben Alice und Bob die gleiche Ergebnisfarbe (dunkelgrün), von der Eve keine Ahnung hat.\nÜbertragen auf das kommende DHKE teilen Alice und Bob nun ein Geheimnis (die Ergebnisfarbe), von der Eve keine Ahnung hat, obwohl die alles mitschneiden konnte, worüber die beiden kommunizierten.",
    "slide3Item0": "Alice wählt eine große Primzahl (p) und einen Generator (g).",
    "slide3Item1": "Alice teilt p und g mit Bob. Eve kennt damit die ausgewählten Zahlen.",
    "slide3Item2": "Alice wählt ihre Geheimzahl (a). Auch Bob wählt seine Geheimzahl(b) aus. Die Privatzahlen werden nicht ausgetauscht!",
    "slide3Item3": "Jetzt generieren Alice und Bob ihren öffentlichen Schlüssel ('A' für Alice und 'B' für Bob) mit Hilfe der Formel, die auf dem Bildschirm zu sehen ist.",
    "slide3Item4": "Alice und Bob tauschen die Werte ihrer öffentlichen Schlüssel (A und B) aus. Eve kann diese beiden Werte kennen.",
    "slide3Item5": "Jetzt generieren Alice und Bob den gemeinsamen geheimen Schlüssel (S) – mit den auf dem Bildschirm angezeigten Formeln.",
    "slide4Item0": "Alice wählt ihre Geheimzahl (a).",
    "slide4Item1": "Alice generiert ihren öffentlichen Schlüssel (A) mit Hilfe der Formel, die auf dem Bildschirm angezeigt wird.",
    "slide4Item2": "Jetzt will Alice ihren öffentlichen Schlüssel (A) mit Bob teilen. Eve blockiert die Übertragung von Alices öffentlichem Schlüssel und behält ihn für sich, ohne dass Alice oder Bob dies bemerken",
    "slide4Item3": "Eve wählt ihre erste Geheimzahl (e1).",
    "slide4Item4": "Eve generiert ihren öffentlichen Schlüssel (EA) mit Hilfe der Formel, die auf dem Bildschirm angezeigt wird.",
    "slide4Item5": "Nun teilt Eve ihren öffentlichen Schlüssel (EA) mit Alice. Alice wird denken, dass dieser öffentliche Schlüssel von Bob kommt.",
    "slide4Item6": "Nun generieren Alice und Eve den geheimen Schlüssel (S1) mit Hilfe der auf dem Bildschirm angezeigten Formeln.",
    "slide4Item7": "Bob wählt seine Geheimzahl (b).",
    "slide4Item8": "Bob generiert seinen öffentlichen Schlüssel (B) mit Hilfe der Formel, die auf dem Bildschirm angezeigt wird.",
    "slide4Item9": "Nun teilt Bob seinen öffentlichen Schlüssel (B) mit Alice. Eve blockiert die Übertragung von Bobs öffentlichem Schlüssel und behält ihn für sich, ohne dass Alice oder Bob dies bemerken.",
    "slide4Item10": "Eve wählt ihre zweite Geheimzahl (e2).",
    "slide4Item11": "Eve generiert ihren öffentlichen Schlüssel (EB) mit Hilfe der Formel, die auf dem Bildschirm angezeigt wird.",
    "slide4Item12": "Jetzt teilt Eve ihren öffentlichen Schlüssel (EB) mit Bob. Bob wird denken, dass dieser öffentliche Schlüssel von Alice kommt.",
    "slide4Item13": "Nun generieren Bob und Eve den geheimen Schlüssel (S2) mit Hilfe der auf dem Bildschirm angezeigten Formeln.",
    "slide4Item14": "Wenn Eve es schafft, die direkte Kommunikation zwischen Alice und Bob weiterhin zu unterbinden und über sich zu lenken, kann sie die gesamte Kommunikation mitlesen."
}