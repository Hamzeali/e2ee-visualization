{
    "language": "English",
    "skip": "Skip intro",
    "reset": "Restart intro",
    "errorTitel": "Error",
    "primeNumberErrorMessage": "(p) must be prime number!",
    "primitiveRootErrorMessage": "(g) must be primitive root of (p)!",
    "emptyErrorMessage": "Empty values are not accepted!",
    "doneTitel": "Done",
    "correctMessage": "The values have been set.",
    "settings": "Settings",
    "animationSpeed": "Animation speed",
    "appLanguage": "Language",
    "zoomEnable": "Enable zoom",
    "secretBob": "Secret (Bob)",
    "secretAlice": "Secret (Alice)",
    "cancel": "Cancel",
    "introStart": "Start the Introduction",
    "aliceIntro": "Hi! I am Alice.",
    "bobIntro": "And I am Bob.",
    "eveIntro": "And here is Eve.",
    "appDesc0": "We'd like to communicate securely with each other and we want to use symmetric encryption to do so.",
    "appDesc1": "In this app we will explain you how DHKE works.",
    "appDesc2": "The application consists of 4 scenes.",
    "firstScene": "The first scene will explain you the basic idea of DHKE using colors.",
    "secondScene": "The second one will give you some mathematical basics about the root of prime number and the discrete logarithm problem.",
    "thirdScene": "The third one will explain DHKE with numbers, where you can use your own values as well :)",
    "fourthScene": "The fourth one will show you how MitM-Attack on DHKE can be happened.",
    "sceneStart1": "So let's start the scenes...",

    "about0": "What is DHKE?",
    "about1": "- Purpose of the Diffie-Hellman Key-Exchange Protocol:",
    "about2": "Diffie-Hellman (DH for short) is a protocol that allows two parties to communicate securely with each other over an insecure channel (such as the internet). The main idea of DH is about generating and exchanging (asymmetric) keys between two parties. The mathematical algorithm can establish a common secret key which can be used for symmetric encryption. DH is not a new protocol as it was invented by Whitfield Diffie and Martin Hellman in Stanford in 1976. DH can generate the secret key but cannot encrypt or decrypt messages. In the next section we will see in detail how this protocol works.",
    "about3": "- The Diffie-Hellman Protocol:",
    "about4": "Scenario: Alice and Bob want to communicate securely using a symmetric encryption scheme (and they have no PKI available). They are connected over an unsecured line and have not yet exchanged a key (so there is no information they share in advance).",
    "about5": "The DH protocol makes it possible to establish a secret shared key between two parties – over the unsecured line. The security is based on the difficulty of the discrete logarithm problem.",
    "about6": "Alice and Bob use a one-way function to obtain a secret key S, the session key, for subsequent correspondence. The session key can be used, for example, as a key in a symmetrical procedure such as AES. This session key is only known to the two parties. How does the protocol work:Alice selects a random number (a) and keeps it secret. She applies a one-way function to a to calculate the number A = g^a and sends it to Bob. He does the same, by selecting a secret random number (b), calculating B = g^b and sending it to Alice. The number g is random and can be publicly known. Alice applies the one-way function together with her secret number (a) to B, while Bob does the same with his secret number b and the received number A.",
    "about7": "The result S is the same in each case because the one-way function is commutative: (g^a)^b = (g^b)^a. But even Bob cannot reconstruct Alice’s secret number (a) from the data available to him. While Alice cannot determine Bob’s secret number (b). And an eaves-dropper (Eve) who knows (g) and has intercepted both A and B cannot use this knowledge to determine a, b, or S.",
    "about8": "Procedure:",
    "about9": "Alice and Bob want to negotiate a secret session key S via a channel that may be intercepted.",
    "about10": "1. They select a prime number p and a random number g (with 2 ≤ g ≤ p−2) and exchange this information openly.",
    "about11": "2. Alice now selects a random number a from {1,···,p−2}, and keeps it secret. Similarly, Bob selects a random number b, and keeps it secret.",
    "about12": "3. Alice now calculates A = g^a (mod p).",
    "about13": "Bob calculates A = g^a (mod p).",
    "about14": "4. Alice sends the result A to Bob. Bob sends the result B to Alice.",
    "about15": "So A and B can be considered public.",
    "about16": "5. In order to determine the session key to be used by both parties, they both sep- arately raise the respective results they have received to the power of their secret random number modulo p. This means:",
    "about17": "- Alice calculates S = B^a (mod p) and",
    "about18": "- Bob calculates S = A^b (mod p).",
    "about19": "Even if a spy (Eve) intercepts g, p, and the interim results A and B, she cannot use these in order to determine the session key used – due to the difficulty of calculating the discrete logarithm a = logg(A).",
    "about20": "The DH problem and the man-in-the-middle:",
    "about21": "Although the DHKE is considered to be one of the practical ways of generating a com- mon secret key between two communicating parties, the basic Diffie-Hellman protocol is susceptible to a man-in-the-middle attack because it does not authenticate the com- municating parties. The attacker can block the communication between the sender and the receiver and then take the role of particular the second party. In this scenario the attacker can get the public keys of each party and generate his own. Then a communication will be established between the attacker and the sender and another communication between the attacker and the receiver where each of the communicating parties thinks he/she is communicating with the real partner. In this way the attacker can easily decrypt the secret message which has encrypted with these generated key.",

    "introduction": "Introduction",
    "intro0": "- What is primitive root modulo a prime number?",
    "intro1": "• A primitive root ",
    "intro2": " is a definite element of a prime residue class group with modulo ",
    "intro3": ". Any element can be generated by exponentiating a primitive root ",
    "intro4": ".",
    "intro5": " modulo ",
    "intro6": "• In other words we can call ",
    "intro7": " primitive root of the prime number ",
    "intro8": " if ",
    "intro9": " are distinct.",
    "intro10": "-> Example: ",
    "intro11": "Let's assume that, ",
    "intro12": " and ",
    "intro13": "   After calculating the modulus, we get:",
    "intro14": "    As we see, all results are ",
    "intro15": "dstinct",
    "intro16": ", so we can say that ",
    "intro17": " is a primitive root of the prime number",
    "intro18": "",
    "intro19": "- Discrete Logarithm Problem:",
    "intro20": " • In a finite group, the discrete logarithm is hard to compute. Thus, the ",
    "intro21": "exponential function",
    "intro22": " is a ",
    "intro23": "one-way function.",
    "intro24": " • But what is one-way function?",
    "intro25": "   -> Assuming that we have data",
    "intro26": ". it is easy to calculate",
    "intro27": ". But it is very difficult to compute its inverse function.",
    "intro28": "Let's take: ",
    "intro29": "   Computing ",
    "intro30": " is easy, but when we want to compute the inverse function, it will be really hard.",
    "intro31": " In other words, if we have ",
    "intro32": ", it will be very hard to know the value of ",
    "intro33": ". Where ",
    "intro34": " can be ",
    "intro35": "etc",

    "intro36": "- What is a generator?",
    "intro37": "A generator (g) of a group is an element that can be used to generate every other element in the group through repeated application of the group operation. In the case of a group of integers modulo a prime number (p), a generator is an element that, when raised to all possible powers from 1 to p-1 (where p is the prime number), generates all the other non-zero elements of the group.",
    "intro38": "- Scenario of the scene:",
    "intro39": "In this scene there is an example of a generator for the multiplicative group of integers modulo a prime number p = 17 is g = 3. The group is {1, 2, 4, 8, 9, 13, 16}. Which is the set of integers from 1 to 16 (p-1) that are relatively prime to 17.",

    "dhke": "What is DHKE?",
    "readDHKE": "Read about DHKE?",
    "yes": "Yes",
    "no": "No",

    "showCase0": "Go one step forward.",
    "showCase1": "Go one step backward.",
    "showCase2": "Show or hide the description box.",
    "showCase3": "Change the settings of the application.",
    "showCase4": "Reset the scene and start from the beginning.",
    "showCase5": "Let the app move in automatic mode.",
    "showCase6": "It has three buttons inside it.",
    "showCase7": "Step number. You can press this number and write the step you would like to go to.",
    "showCase8": "In this box you will see some explanations about what happens on the screen.(You can maximize or minimize the box with long press)",

    "outOfRangeError": "Please enter a valid number.",
    "goToStep": "Go to step number:",

    "lastLeft": "Beginning of the scene!",
    "lastLeft2": "Beginning of the scene! Do you want to switch to the previous scene?",
    "lastRight": "End of the scene! Do you want to switch to the next scene?",
    "lastRight2": "End of the scene! Do you want to go back to the first scene?",

    "sceneStart2": "Start the scenes",
    "slide1": "Basic Idea of DHKE",
    "slide2": "Some Mathematical basics",
    "slide3": "How does the DHKE work?",
    "slide4": "MitM Attack on DHKE",
    "text1": "The Diffie-Hellman key exchange protocol can be demonstrated using an analogy that works with color mixtures\n(later we will see how it works with numbers).",
    "text2": "Choosing a prime number (p) and a generator (g).\n",
    "text31": "This time with numbers – with small numbers. In practice, DHKE uses large numbers (p > 3000 bit according to the BSI recommendation).",
    "text321": "Alice chooses a large prime number. Let's say she chooses p = ",
    "text322": "and a generator g = ",
    "text4": "Man-in-the-middle attack on DHKE: Eve blocks the key exchange between Alice and Bob.",
    "slide1Item0": "Alice thinks about her first color, which is yellow.",
    "slide1Item1": "When Alice sends Bob the basic color, which later in the real protocol will be the 'generator', Eve can listen to her and so she also knows the color.",
    "slide1Item2": "To prevent Eve from getting the secret colors, Alice will think about another color (red) and Bob also will think about another color (turquoise).",
    "slide1Item3": "Alice and Bob  mix Alice's first color (yellow) with the colors, they respectively thought about the second time. Now Alice and Bob, both have a new mixed color (Alice has orange, Bob has blue).",
    "slide1Item4": "Alice sends her mixed color (orange) to Bob, and Bob sends his mixed color (blue) to Alice. Eve can know the mixed color of both, but not the actual color.",
    "slide1Item5": "Alice will mix Bob's mixed color (blue) with her second color (red). Bob will do the same, he mixes Alice's mixed color (orange) with his second color (blue).",
    "slide1Item6": "Now Alice and Bob have the same result color which is (dark green), where Eve does not have any idea about it.\nTransferred to the upcoming DHKE, Alice and Bob now share a secret (the result color) that Eve has no idea about, although she was able to record everything the both communicated about.",
    "slide3Item0": "Alice chooses a large prime number and a generator.",
    "slide3Item1": "Alice shares p and g with Bob. Eve will know the selected numbers.",
    "slide3Item2": "Alice selects her secret number (a). Bob also selects his secret number (b). The secret numbers will not be exchanged!!",
    "slide3Item3": "Now Alice and Bob generate their public key ('A' for Alice and 'B' for Bob) with the help of the formula that's shown on the screen.",
    "slide3Item4": "Alice and Bob exchange the values of their public keys (A and B). Eve can know these two values.",
    "slide3Item5": "Now Alice and Bob generate the shared secret key (S) - using the formulas shown on the screen.",
    "slide4Item0": "Alice selects her secret number (a).",
    "slide4Item1": "Alice generates her public key (A) with the help of the formula that's shown on the screen.",
    "slide4Item2": "Now Alice wants to share her public key (A) with Bob. Eve blocks the transmission of Alice's public key and keeps it for herself without Alice or Bob noticing that.",
    "slide4Item3": "Eve selects her first secret number (e1).",
    "slide4Item4": "Eve generates her public key (EA) with the help of the formula shown on the screen.",
    "slide4Item5": "Now Eve shares her public key (EA) with Alice. Alice will think that this public key is coming from Bob.",
    "slide4Item6": "Now Alice and Eve generate the secret key (S1) with the help of the formulas shown on the screen.",
    "slide4Item7": "Bob selects his secret number (b).",
    "slide4Item8": "Bob generates his public key (B) with the help of the formula that's shown on the screen.",
    "slide4Item9": "Now Bob shares his public key (B) with Alice. Eve blocks the transmission of Bob's public key and keeps it for herself without letting Alice or Bob notice that.",
    "slide4Item10": "Eve selects her second secret number (e2).",
    "slide4Item11": "Eve generates her public key (EB) with the help of the formula shown on the screen.",
    "slide4Item12": "Now Eve shares her public key (EB) with Bob. Bob will think that this public key is coming from Alice.",
    "slide4Item13": "Now Bob and Eve generate the secret key (S2) with the help of the formulas shown on the screen.",
    "slide4Item14": "If Eve manages to continue to stop direct communication between Alice and Bob, and channel it through her, she will be able to read all communication."
}