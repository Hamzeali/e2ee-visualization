{
    "language": "English",
    "slide1": "How does an E-Mail work?",
    "slide2": "Who can read my E-mail?",
    "slide3": "Effect of the server settings",
    "slide4": "Effect of backup between servers",
    "slide5": "DE-Mail",
    "slide6": "Effect of backup between servers",
    "slide7": "Effect of end-to-end encryption",
    "slide8": "Effect of end-to-end encryption",
    "slide9": "Asymmetric cryptography - Signing",
    "slide10": "Asymmetric cryptography - Signing + Encryption",
    "slide11": "Asymmetric cryptography - Summary",
    "slide12": "E-Mail-Security with S/MIMIE",
    "slide13": "E-Mail-Security with S/MIMIE",

    "outgoingMailServer": "Outgoing Mail Server",
    "inboxServer": "     Inbox server     ",
    "forwardingServer": "Forwarding server",

    "skip": "Skip intro",
    "reset": "Restart intro",
    "errorTitel": "Error",
    "primeNumberErrorMessage": "p must be prime number!",
    "primitiveRootErrorMessage": "g must be primitive root of p!",
    "emptyErrorMessage": "Empty values are not accepted!",
    "doneTitel": "Done",
    "correctMessage": "The values have been set.",
    "settings": "Settings",
    "animationSpeed": "Animation speed",
    "appLanguage": "Language",
    "zoomEnable": "Enable zoom",
    "secretBob": "Secret (Bob)",
    "secretAlice": "Secret (Alice)",
    "cancel": "Cancel",
    "introStart": "Start the Introduction",
    "aliceIntro": "Hi! I am Alice.",
    "bobIntro": "And I am Bob.",
    "malloryIntro": "And here is Mallory.",
    "appDesc0": "We (Alice and Bob) would like to communicate securely with each other and we want to use End-to-End encryption to do so.",
    "appDesc1": "In this app we will explain you how secure email works.",
    "appDesc2": "The application consists of 13 scenes.",
    "firstScene": "Scene 1 to 6, explain the basic of how the email works and show how you who can read the email on the way to its destination.",
    "secondScene": "Scene 7 and 8 show you the effect of using end-to-end encryption.",
    "thirdScene": "Scene 9, 10 and 11 explain the asymmetric cryptography using the signature and the encryption.",
    "fourthScene": "Scene 12 and 13 show e-mail security with S/MIME and the effect of the server settings respectively.",
    "sceneStart1": "So let's start the scenes...",

    "secret": "Secret ",

    "toolTipRightBtn": "Next step",
    "toolTipLeftBtn": "Previous step",
    "toolTipMoreBtn": "More",
    "toolTipPlayBtn": "Play",
    "toolTipResetBtn": "Reset",
    "toolTipSettingsBtn": "Settings",
    "toolTipDescBtn": "Show description",

    "ref": "References",
    "wiki": "End-to-End encryption: ",
    "url": "https://en.wikipedia.org/wiki/End-to-end_encryption",

    "aboutTitle": "End-to-End Encryption",
    "about0": "What is E2EE?",
    "about1": "- Purpose of the Diffie-Hellman Key-Exchange Protocol",
    "about2": "End-to-end encryption (E2EE) is a security method that keeps chats and messages secure. The end-to-end encryption is a system of communication where only the users communicating can read the messages. In principle, it prevents potential eavesdroppers – including telecom providers, Internet providers, malicious actors, and even the provider of the communication service – from being able to access the cryptographic keys needed to decrypt the conversation.\nEnd-to-end encryption is intended to prevent data being read or secretly modified, other than by the true sender and recipient(s). The messages are encrypted by the sender but the third party does not have a means to decrypt them, and stores them encrypted. The recipients retrieve the encrypted data and decrypt it themselves.\nBecause no third parties can decipher the data being communicated or stored, for example, companies that provide end-to-end encryption are unable to hand over texts of their customers' messages to the authorities.\nIn 2022, the UK's Information Commissioner's Office, the government body responsible for enforcing online data standards, stated that opposition to E2EE was misinformed and the debate too unbalanced, with too little focus on benefits, since E2EE 'helped keep children safe online' and law enforcement access to stored data on servers was 'not the only way' to find abusers.",
    "about3": "- The Diffie-Hellman Protocol",
    "about4": "Scenario: Alice and Bob want to communicate securely using a symmetric encryption scheme (and they have no PKI available). They are connected over an unsecured line and have not yet exchanged a key (so there is no information they share in advance).",
    "about5": "The DH protocol makes it possible to establish a secret shared key between two parties – over the unsecured line. The security is based on the difficulty of the discrete logarithm problem.",
    "about6": "Alice and Bob use a one-way function to obtain a secret key S, the session key, for subsequent correspondence. The session key can be used, for example, as a key in a symmetrical procedure such as AES. This session key is only known to the two parties. How does the protocol work:Alice selects a random number a and keeps it secret. She applies a one-way function to a to calculate the number A = g^a and sends it to Bob. He does the same, by selecting a secret random number b, calculating B = g^b and sending it to Alice. The number g is random and can be publicly known. Alice applies the one-way function together with her secret number a to B, while Bob does the same with his secret number b and the received number A.",
    "about7": "The result S is the same in each case because the one-way function is commutative: (g^a)^b = (g^b)^a. But even Bob cannot reconstruct Alice’s secret number a from the data available to him. While Alice cannot determine Bob’s secret number b. And an eaves-dropper (Eve) who knows g and has intercepted both A and B cannot use this knowledge to determine a, b, or S.",
    "about8": "Procedure:",
    "about9": "Alice and Bob want to negotiate a secret session key S via a channel that may be intercepted.",
    "about10": "1. They select a prime number p and a random number g (with 2 ≤ g ≤ p−2) and exchange this information openly.",
    "about11": "2. Alice now selects a random number a from {1,···,p−2}, and keeps it secret. Similarly, Bob selects a random number b, and keeps it secret.",
    "about12": "3. Alice now calculates A = g^a (mod p).",
    "about13": "Bob calculates A = g^a (mod p).",
    "about14": "4. Alice sends the result A to Bob. Bob sends the result B to Alice.",
    "about15": "So A and B can be considered public.",
    "about16": "5. In order to determine the session key to be used by both parties, they both sep- arately raise the respective results they have received to the power of their secret random number modulo p. This means:",
    "about17": "- Alice calculates S = B^a (mod p) and",
    "about18": "- Bob calculates S = A^b (mod p).",
    "about19": "Even if a spy (Eve) intercepts g, p, and the interim results A and B, she cannot use these in order to determine the session key used – due to the difficulty of calculating the discrete logarithm a = logg(A).",
    "about20": "The DH problem and the man-in-the-middle",
    "about21": "Although the DHKE is considered to be one of the practical ways of generating a com- mon secret key between two communicating parties, the basic Diffie-Hellman protocol is susceptible to a man-in-the-middle attack because it does not authenticate the com- municating parties. The attacker can block the communication between the sender and the receiver and then take the role of particular the second party. In this scenario the attacker can get the public keys of each party and generate his own. Then a communication will be established between the attacker and the sender and another communication between the attacker and the receiver where each of the communicating parties thinks he/she is communicating with the real partner. In this way the attacker can easily decrypt the secret message which has encrypted with these generated key.",

    "introduction": "Introduction",
    "intro0": "- What is primitive root modulo a prime number?",
    "intro1": "• A primitive root ",
    "intro2": " is a definite element of a prime residue class group with modulo ",
    "intro3": ". Any element can be generated by exponentiating a primitive root ",
    "intro4": ".",
    "intro5": " modulo ",
    "intro6": "• In other words we can call ",
    "intro7": " primitive root of the prime number ",
    "intro8": " if ",
    "intro9": " are distinct.",
    "intro10": "-> Example: ",
    "intro11": "Let's assume that, ",
    "intro12": " and ",
    "intro13": "   After calculating the modulus, we get:",
    "intro14": "    As we see, all results are ",
    "intro15": "dstinct",
    "intro16": ", so we can say that ",
    "intro17": " is a primitive root of the prime number",
    "intro18": "",
    "intro19": "- Discrete Logarithm Problem",
    "intro20": "In a finite group, the discrete logarithm is hard to compute. Thus, the power (exponential function) modulo p is easy to consider. The inverse is the calculation of the discrete logarithm. The discrete logarithm is difficult to calculate in a finite group. Thus, the exponential function is a one-way function.",
    "intro21": "exponential function",
    "intro22": " is a ",
    "intro23": "one-way function.",
    "intro24": " • But what is one-way function?",
    "intro25": "   -> Assuming that we have data",
    "intro26": ". it is easy to calculate",
    "intro27": ". But it is very difficult to compute its inverse function.",
    "intro28": "Let's take: ",
    "intro29": "   Computing ",
    "intro30": " is easy, but when we want to compute the inverse function, it will be really hard.",
    "intro31": " In other words, if we have ",
    "intro32": ", it will be very hard to know the value of ",
    "intro33": ". Where ",
    "intro34": " can be ",
    "intro35": "etc",

    "intro36": "- What is a generator?",
    "intro37": "A generator g of a group is an element that can be used to generate every other element in the group through repeated application of the group operation. In the case of a group of integers modulo a prime number p, a generator is an element that, when raised to all possible powers from 1 to p-1, generates all the other non-zero elements of the group.",
    "intro38": "- Scenario of the scene",
    "intro39": "This scene considers the multiplicative group modulo the prime p = 1. The group contains as elements all numbers from 1 to 16. As generator we choose g = 3. Then we can generate with the power g^i modulo p all elements of the group. The exponent i also runs through all values from 1 to 16.",

    "e2ee": "What is DHKE?",
    "readDHKE": "Read about DHKE?",
    "yes": "Yes",
    "no": "No",
    "suggestRoot": "Suggest root",

    "showCase0": "Go one step forward.",
    "showCase1": "Go one step backward.",
    "showCase2": "Show or hide the description box.",
    "showCase3": "Change the settings of the application.",
    "showCase4": "Reset the scene and start from the beginning.",
    "showCase5": "Let the app move in automatic mode.",
    "showCase6": "It has three buttons inside it.",
    "showCase7": "Step number. You can press this number and write the step you would like to go to.",
    "showCase8": "In this box you will see some explanations about what happens on the screen.(You can maximize or minimize the box with long press)",

    "outOfRangeError": "Please enter a valid number.",
    "goToStep": "Go to step number:",

    "aboutApp": "About...",
    "aboutApp1": "The Flutter app 'E2EE' was developed in the course of a bachelor thesis by ",
    "ali": "https://www.linkedin.com/in/hamze-ali-65b000207/",
    "aboutApp2": " for the CrypTool project.",
    "aboutApp3": "(C) 2023, freeware, open source (Apache 2), CrypTool (",
    "aboutApp4": "https://www.cryptool.org",
    "aboutApp5": "Last modification / built:  22.03.2023",

    "message": "Message",

    "lastLeft": "Beginning of the scene!",
    "lastLeft2": "Beginning of the scene! Do you want to switch to the previous scene?",
    "lastRight": "End of the scene! Do you want to switch to the next scene?",
    "lastRight2": "End of the scene! Do you want to go back to the first scene?",

    "sceneStart2": "Start the scenes",
    "text1": "Color mixing is a simple analogy that can be used to illustrate the Diffie-Hellman Key Exchange (DHKE) protocol. And in Scene 3, we'll see how it works with numbers.",
    "text2": "Choosing a prime number p and a generator g.\n",
    "prevOp": "Previous operation: ",
    "newOp": "New operation: ",
    "text31": "This time with numbers – with small numbers. In practice, DHKE uses large numbers (p > 3000 bit according to the BSI recommendation).",
    "text321": "Alice chooses a large prime number. Let's say she chooses p = ",
    "text322": "and a generator g = ",
    "text4": "Man-in-the-middle attack on DHKE: Eve blocks the key exchange between Alice and Bob.",
    "slide1Item0": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item1": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item2": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item3": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item4": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item5": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item6": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item7": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item8": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item9": "Alice and Bob want to communicate with each other over the Internet!",
    "slide1Item10": "Bob sends a message to the inbox-server.",
    "slide1Item11": "Bob sends a message to the inbox-server.",
    "slide1Item12": "The inbox-server sends the message to a forwarding-server.",
    "slide1Item13": "The inbox-server sends the message to a forwarding-server.",
    "slide1Item14": "The forwarding-server forwards the message to an inbox-server near Alice.",
    "slide1Item15": "Alice receives the message from Bob.",
    "slide1Item16": "Alice receives the message from Bob.",
    "slide2Item0": "TODO",
    "slide2Item1": "TODO",
    "slide2Item2": "TODO",
    "slide2Item3": "TODO",
    "slide2Item4": "TODO",
    "slide2Item5": "TODO",
    "slide2Item6": "TODO",
    "slide2Item7": "TODO",
    "slide2Item8": "TODO",
    "slide2Item9": "TODO",
    "slide3Item0": "The way between Alice and the inbox-server will be safe.",
    "slide3Item1": "The way between Alice and the inbox-server will be safe.",
    "slide3Item2": "Mallory can not read the message.",
    "slide3Item3": "Mallory can access the message between the servers.",
    "slide3Item4": "Between the inbox-server and Bob the message will be secure.",
    "slide3Item5": "Between the inbox-server and Bob the message will be secure.",
    "slide3Item6": "Between the inbox-server and Bob the message will be secure.",
    "slide3Item7": "Mallory can access the message between the servers.",
    "slide3Item8": "Mallory can access the message between the servers.",
    "slide3Item9": "Between the inbox-server and Alice the message will be secure.",
    "slide3Item10": "Between the inbox-server and Alice the message will be secure.",
    "slide3Item11": "Between the inbox-server and Alice the message will be secure.",
    "slide4Item0": "Between Alice and the server, the message is secure. But once its on the server, Mallory can access the message.",
    "slide4Item1": "Between Alice and the server, the message is secure. But once its on the server, Mallory can access the message.",
    "slide4Item2": "Between Alice and the server, the message is secure. But once its on the server, Mallory can access the message.",
    "slide4Item3": "The way between the servers is now secure and Mallory can not access the message. But again the server is not secure!",
    "slide4Item4": "Between the server and Bob, the message is secure.",
    "slide4Item5": "Between the server and Bob, the message is secure.",
    "slide4Item6": "Between Bob and the server, the message is secure. But once its on the server, Mallory can access the message.",
    "slide4Item7": "The way between the servers is secure and Mallory can not access the message. But again the server is not secure!",
    "slide4Item8": "The way between the servers is secure and Mallory can not access the message. But again the server is not secure!",
    "slide4Item9": "Between the server and Alice, the message is secure.",
    "slide4Item10": "Between the server and Alice, the message is secure.",
    "slide4Item11": "Between the server and Alice, the message is secure.",
    "slide5Item0": "TODO",
    "slide5Item1": "TODO",
    "slide5Item2": "TODO",
    "slide5Item3": "TODO",
    "slide5Item4": "TODO",
    "slide5Item5": "TODO",
    "slide5Item6": "TODO",
    "slide5Item7": "TODO",
    "slide5Item8": "TODO",
    "slide5Item9": "TODO",
    "slide5Item10": "TODO",
    "slide5Item11": "TODO",
    "slide5Item12": "TODO",
    "slide7Item0": "With E2EE the servers will be secure. That means Mallory can not access the message even on the server.",
    "slide7Item1": "With E2EE the servers will be secure. That means Mallory can not access the message even on the server.",
    "slide7Item2": "Alice attaches the message with her certificate.",
    "slide7Item3": "Alice attaches the message with her certificate.",
    "slide7Item4": "Alice attaches the message with her certificate.",
    "slide7Item5": "Alice sends her secured message to the server. Mallory has no access on the server.",
    "slide7Item6": "The transmission between the servers is also secure.",
    "slide7Item7": "The way between the server and Bob is also secure.",
    "slide7Item8": "Only Bob can see the content of the message.",
    "slide8Item0": "Bob will send his message with E2EE.",
    "slide8Item1": "Bob attaches the message with his certificate.",
    "slide8Item2": "Bob attaches the message with his certificate.",
    "slide8Item3": "Bob attaches the message with his certificate.",
    "slide8Item4": "Bob sends his secured message to the server. The server is secure and Mallory has no access.",
    "slide8Item5": "The transmission between the servers is also secure.",
    "slide8Item6": "The transmission between the servers is also secure.",
    "slide8Item7": "Alice receives the message from Bob.",
    "slide8Item8": "Only Alice can see the content of the message.",
    "slide8Item9": "Only Alice can see the content of the message.",
    "slide8Item10": "Only Alice can see the content of the message.",
    "slide12Item0": "Alice generates a pair of keys (public key and private key).",
    "slide12Item1": "Alice generates a pair of keys (public key and private key).",
    "slide12Item2": "Bob generates a pair of keys (public key and private key).",
    "slide12Item3": "Alice writes her message.",
    "slide12Item4": "Alice encrypts her message with her private key.",
    "slide12Item5": "Alice attaches her public key to her message to send it to Bob.",
    "slide12Item6": "Alice sends her message to Bob over the servers.",
    "slide12Item7": "Alice sends her message to Bob over the servers.",
    "slide12Item8": "Alice sends her message to Bob over the servers.",
    "slide12Item9": "Bob gets the Alice's public key.",
    "slide13Item0": "Bob writes his message.",
    "slide13Item1": "Bob encrypts his message with his private key.",
    "slide13Item2": "Bob attaches his public key to his message to send it to Alice.",
    "slide13Item3": "Bob's public key is enveloped (encrypted) using Alice public key.",
    "slide13Item4": "Bob's public key is enveloped (encrypted) using Alice public key.",
    "slide13Item5": "The message and the envelope are sent to Alice.",
    "slide13Item6": "The message and the envelope are sent to Alice.",
    "slide13Item7": "The message and the envelope are sent to Alice.",
    "slide13Item8": "The message and the envelope are sent to Alice.",
    "slide13Item9": "Alice opens (decrypts) the envelope using her private key to extract Bob's public key.",
    "slide13Item10": "Alice opens (decrypts) the envelope using her private key to extract Bob's public key.",
    "slide13Item11": "Alice has Bob's public key."
}